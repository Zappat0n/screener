{"version":3,"sources":["app/containers/Index/Index.js","app/api/requests.js","app/api/queries.js","app/reducers/indexSlice.js","app/containers/Indexes/Indexes.js","app/containers/Stock/Stock.js","app/containers/IndustryFilter/IndustryFilter.js","app/reducers/filterSlice.js","app/reducers/stockSlice.js","app/data/components.js","app/containers/Stocks/Stocks.js","app/reducers/profileSlice.js","app/components/ProfileRow.js","app/containers/Profile/Profile.js","app/containers/Routes/Routes.js","app/store.js","index.js"],"names":["Index","props","ticker","selectName","useSelector","state","indexes","name","selectPrice","price","selectChange","changesPercentage","className","type","require","config","quoteRequest","Request","process","port","method","profileRequest","displayError","error","container","document","querySelector","innerHTML","display","createElement","innerText","appendChild","setTimeout","query","request","a","fetch","response","json","getQuote","getProfile","indexSlice","createSlice","initialState","GSPC","NDX","STOXX50E","reducers","clearIndexes","Object","keys","forEach","key","updateQuote","action","payload","symbol","updateIndexes","index","substr","length","refreshIndexes","createAsyncThunk","actions","Indexes","components","dispatch","useDispatch","map","value","join","then","unwrapResult","originalPromiseResult","to","Stock","change","data","stocks","getColor","changes","getCell","text","colored","companyName","Math","round","sector","IndustryFilter","handleChange","filters","values","includes","push","onChange","event","target","filterSlice","stocksVisible","updateFilter","stockSlice","clearStocks","updateStocks","stock","setIndex","refreshStocks","indexComponents","Stocks","id","useParams","filter","quote","profileSlice","updateProfile","refreshProfile","ProfileRow","title1","data1","title2","data2","defaultProps","Profile","profile","checkType","toString","src","image","alt","mktCap","range","beta","lastDiv","dcf","exchangeShortName","country","industry","ceo","website","description","Routes","path","store","configureStore","reducer","indexReducer","stockReducer","profileReducer","filterReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3cf41100.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Index.css';\n\nconst Index = (props) => {\n  const { ticker } = props;\n  const selectName = useSelector((state) => state.indexes[ticker].name);\n  const selectPrice = useSelector((state) => state.indexes[ticker].price);\n  const selectChange = useSelector((state) => state.indexes[ticker].changesPercentage);\n\n  return (\n    <div className=\"index\">\n      <button\n        type=\"button\"\n      >\n        {selectName}\n        <div className={selectChange < 0 ? 'colorRed' : 'colorBlue'}>\n          {selectPrice}\n          {' '}\n          {selectChange}\n          %\n        </div>\n      </button>\n    </div>\n  );\n};\n\nIndex.propTypes = {\n  ticker: PropTypes.string.isRequired,\n};\n\nexport default Index;\n","require('dotenv').config();\n\nexport const quoteRequest = (name) => new Request(\n  `https://financialmodelingprep.com/api/v3/quote/${name}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n\nexport const quotesRequest = (group) => new Request(\n  `https://financialmodelingprep.com/api/v3/quotes/${group}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n\nexport const profileRequest = (name) => new Request(\n  `https://financialmodelingprep.com/api/v3/profile/${name}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n","import { profileRequest, quoteRequest, quotesRequest } from './requests';\n\nconst displayError = (error) => {\n  const container = document.querySelector('.errors');\n  if (container.innerHTML === '') {\n    const display = document.createElement('h5');\n    display.innerText = error;\n    container.appendChild(display);\n    setTimeout(() => {\n      const container = document.querySelector('.errors');\n      container.innerHTML = '';\n    }, 3000);\n  }\n};\n\nasync function query(request) {\n  try {\n    const response = await fetch(request);\n    return response.json();\n  } catch (error) {\n    displayError(error);\n    return null;\n  }\n}\n\nasync function getQuote(ticker) {\n  const request = quoteRequest(ticker);\n  return query(request);\n}\n\nasync function getQuotes(ticker) {\n  return query(quotesRequest(ticker));\n}\n\nasync function getProfile(ticker) {\n  return query(profileRequest(ticker));\n}\n\nexport { getProfile, getQuote, getQuotes };\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getQuote } from '../api/queries';\n\nconst initialState = {\n  GSPC: { name: 'S&P 500', price: '' },\n  NDX: { name: 'NASDAQ 100', price: '' },\n  STOXX50E: { name: 'ESTX 50 PR.EUR', price: '' },\n};\n\nexport const indexSlice = createSlice({\n  name: 'indexes',\n  initialState,\n  reducers: {\n    clearIndexes: (state) => {\n      Object.keys(state).forEach((key) => delete state[key]);\n    },\n    updateQuote: (state, action) => {\n      // eslint-disable-next-line prefer-destructuring\n      state[action.payload[0].symbol] = action.payload[0];\n    },\n    updateIndexes: (state, action) => {\n      if (action.payload) {\n        action.payload.forEach((index) => {\n          const { symbol } = index;\n          state[symbol.substr(1, symbol.length - 1)] = index;\n        });\n      }\n    },\n  },\n});\n\nexport const refreshIndexes = createAsyncThunk(\n  'indexes/updateIndexes',\n  async (indexes) => {\n    const response = await getQuote(indexes);\n    indexSlice.actions.updateIndexes(response);\n    return response;\n  },\n);\n\nexport const { clearIndexes, updateQuote, updateIndexes } = indexSlice.actions;\n\nexport default indexSlice.reducer;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport Index from '../Index/Index';\nimport { refreshIndexes, updateIndexes } from '../../reducers/indexSlice';\nimport './Indexes.css';\n\nconst Indexes = () => {\n  const indexes = useSelector((state) => state.indexes);\n  const components = useSelector((state) => state.indexes);\n  const dispatch = useDispatch();\n\n  if (indexes.GSPC.price === '') {\n    dispatch(refreshIndexes(Object.keys(indexes).map((value) => `^${value}`).join(',')))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateIndexes(originalPromiseResult));\n      });\n  }\n\n  const createIndexes = () => {\n    if (components) {\n      return Object.keys(components).map(\n        (ticker) => (\n          <Link key={ticker} to={`/index/${ticker}`} className=\"link\">\n            <Index ticker={ticker} />\n          </Link>\n        ),\n      );\n    }\n    return [];\n  };\n\n  return (\n    <div className=\"indexes\">\n      {createIndexes()}\n    </div>\n  );\n};\n\nexport default Indexes;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Stock.css';\n\nconst Stock = (props) => {\n  const { ticker } = props;\n  const data = useSelector((state) => (state.stocks[ticker] ? state.stocks[ticker] : ''));\n\n  const getPercentage = (change, price) => {\n    if (price !== '') {\n      return (change !== 0 ? `${(Math.round((change * 10000) / price) / 100)}%` : '0%');\n    }\n    return '';\n  };\n\n  const getColor = () => (data && data.changes < 0 ? 'colorRed' : 'colorBlue');\n\n  const getCell = (text, colored = false) => (\n    <Link key={ticker} to={`/stock/${ticker}`} className={`link ${(colored ? getColor() : '')}`}>\n      {text}\n    </Link>\n  );\n\n  return (\n    <tr className=\"stock\">\n      <td>\n        {getCell(data.companyName)}\n      </td>\n      <td>\n        {getCell(data.price)}\n      </td>\n      <td>\n        {getCell(getPercentage(data.changes, data.price), true)}\n      </td>\n      <td>\n        {getCell(data.sector)}\n      </td>\n    </tr>\n  );\n};\n\nStock.propTypes = {\n  ticker: PropTypes.string.isRequired,\n};\n\nexport default Stock;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './IndustryFilter.css';\n\nconst IndustryFilter = (props) => {\n  const { handleChange } = props;\n  const stocks = useSelector((state) => state.stocks);\n  const filters = ['All'];\n\n  const createFilters = () => {\n    Object.values(stocks).forEach((data) => {\n      if (data.sector && !filters.includes(data.sector)) {\n        filters.push(data.sector);\n      }\n    });\n  };\n  createFilters();\n\n  return (\n    <div className=\"filter\">\n      <div className=\"content\">\n        Sector:\n        {'  '}\n        <select\n          className=\"industry-filter\"\n          onChange={(event) => handleChange(event.target.value)}\n        >\n          {filters.map((sector) => (\n            <option key={sector} value={sector}>\n              {sector}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nIndustryFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default IndustryFilter;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 'All',\n  stocksVisible: true,\n};\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    updateFilter: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { updateFilter } = filterSlice.actions;\n\nexport default filterSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getProfile } from '../api/queries';\n\nconst initialState = {\n};\n\nexport const stockSlice = createSlice({\n  name: 'stocks',\n  initialState,\n  reducers: {\n    clearStocks: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      Object.keys(state).forEach((key) => delete state[key]);\n    },\n    updateStocks: (state, action) => {\n      action.payload.forEach((stock) => {\n        // eslint-disable-next-line no-param-reassign\n        state[stock.symbol] = stock;\n      });\n    },\n    setIndex: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.index = action.payload;\n    },\n  },\n});\n\nexport const refreshStocks = createAsyncThunk(\n  'stocks/updateStocks',\n  async (ticker) => {\n    const response = await getProfile(ticker);\n    stockSlice.actions.updateStocks(response);\n    return response;\n  },\n);\n\nexport const { clearStocks, setIndex, updateStocks } = stockSlice.actions;\n\nexport default stockSlice.reducer;\n","const indexComponents = {\n  GSPC: ['MSFT', 'AAPL', 'AMZN', 'FB', 'GOOGL', 'GOOG', 'JNJ', 'V', 'PG', 'JPM', 'HD', 'UNH', 'MA', 'NVDA', 'VZ', 'NFLX', 'ADBE', 'DIS', 'INTC', 'PYPL', 'T', 'PFE', 'CSCO'],\n  NDX: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'GOOGL', 'FB', 'TSLA', 'NVDA', 'PYPL', 'INTC', 'ASML', 'CMCSA', 'NFLX', 'ADBE', 'CSCO', 'AVGO', 'PEP', 'TXN', 'PDD', 'TMUS', 'COST', 'QCOM', 'AMGN', 'AMAT', 'SBUX', 'JD', 'CHTR', 'INTU', 'MU', 'AMD'],\n  STOXX50E: ['MC.PA', 'ASML.AS', 'OR.PA', 'PRX.AS', 'VOW.DE', 'SAP.DE', 'LIN', 'SIE.DE', 'ABI.BR', 'SAN.PA'],\n};\n\nexport default indexComponents;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useParams } from 'react-router-dom';\nimport Stock from '../Stock/Stock';\nimport IndustryFilter from '../IndustryFilter/IndustryFilter';\nimport { updateFilter } from '../../reducers/filterSlice';\nimport {\n  clearStocks, refreshStocks, setIndex, updateStocks,\n} from '../../reducers/stockSlice';\nimport indexComponents from '../../data/components';\n\nimport './Stocks.css';\n\nconst Stocks = () => {\n  const { id } = useParams();\n  const components = useSelector((state) => state.stocks);\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  const initialize = () => {\n    dispatch(updateFilter('All'));\n    dispatch(clearStocks());\n    dispatch(setIndex(id));\n    dispatch(refreshStocks(indexComponents[id].join(',')))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateStocks(originalPromiseResult));\n      });\n  };\n\n  if (components.index !== id) {\n    initialize();\n  }\n\n  const createStocks = () => {\n    if (components) {\n      return Object.keys(components).filter((quote) => (\n        (components[quote].sector === filter.value || filter.value === 'All')) && quote !== 'index').map(\n        (quote) => <Stock key={quote} ticker={quote} />,\n      );\n    }\n    return [];\n  };\n\n  const changeFilter = (sector) => {\n    dispatch(updateFilter(sector));\n  };\n\n  return (\n    <>\n      <div className=\"stocks\">\n        <IndustryFilter handleChange={changeFilter} />\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n              <th>Change</th>\n              <th>Sector</th>\n            </tr>\n          </thead>\n          <tbody>\n            {createStocks()}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default Stocks;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getProfile } from '../api/queries';\n\nconst initialState = { };\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    updateProfile: (state, action) => {\n      const data = action.payload[0];\n      // eslint-disable-next-line no-param-reassign\n      state.data = data;\n    },\n  },\n});\n\nexport const { updateProfile } = profileSlice.actions;\n\nexport const refreshProfile = createAsyncThunk(\n  'profile/updateProfile',\n  async (ticker) => {\n    const response = await getProfile(ticker);\n    updateProfile(response);\n    return response;\n  },\n);\n\nexport default profileSlice.reducer;\n","import PropTypes from 'prop-types';\n\nconst ProfileRow = ({\n  title1, data1, title2, data2,\n}) => (\n  <div className=\"row\">\n    <div className=\"cell\">\n      <div>{title1}</div>\n      <div>{data1}</div>\n    </div>\n    <div className=\"cell\">\n      <div>{title2}</div>\n      <div>{data2}</div>\n    </div>\n  </div>\n);\n\nProfileRow.defaultProps = {\n  data1: '',\n  data2: '',\n};\n\nProfileRow.propTypes = {\n  title1: PropTypes.string.isRequired,\n  data1: PropTypes.string,\n  title2: PropTypes.string.isRequired,\n  data2: PropTypes.string,\n};\n\nexport default ProfileRow;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { Link, useParams } from 'react-router-dom';\nimport { refreshProfile, updateProfile } from '../../reducers/profileSlice';\nimport './Profile.css';\nimport ProfileRow from '../../components/ProfileRow';\n\nconst Profile = () => {\n  const { id } = useParams();\n  const data = useSelector((state) => (state.profile.data ? state.profile.data : ''));\n  const index = useSelector((state) => state.stocks.index);\n  const dispatch = useDispatch();\n\n  const initialize = () => {\n    dispatch(refreshProfile(id))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateProfile(originalPromiseResult));\n      });\n  };\n\n  if (data.symbol !== id) {\n    initialize();\n  }\n\n  const checkType = (data) => ((!data || typeof data === 'string') ? data : data.toString());\n\n  return (\n    <div className=\"profile\">\n      <div className=\"content\">\n        <Link key={index} to={`/index/${index || ''}`} className=\"link\">\n          Go Back\n        </Link>\n        <div className=\"top\">\n          <img className=\"logo\" src={data.image} alt=\"logo\" />\n          <h2>\n            {data.companyName}\n          </h2>\n          <h4>\n            {data.price}\n          </h4>\n          <h5 className={data.changes < 0 ? 'colorRed' : 'colorBlue'}>\n            {data.changes}\n          </h5>\n        </div>\n        <div className=\"priceData\">\n          <ProfileRow title1=\"Previous close\" data1={(Math.round((data.price - data.changes) * 100) / 100).toString()} title2=\"Market Cap\" data2={checkType(data.mktCap)} />\n          <ProfileRow title1=\"52 Week Range\" data1={data.range} title2=\"Beta\" data2={checkType(data.beta)} />\n          <ProfileRow title1=\"Dividend Yield\" data1={`${Math.round((data.lastDiv * 10000) / data.price) / 100}%`} title2=\"DCF\" data2={checkType(data.dcf)} />\n          <ProfileRow title1=\"Exchange\" data1={data.exchangeShortName} title2=\"Country\" data2={data.country} />\n        </div>\n        <div className=\"info\">\n          <h3>Company Information</h3>\n          <ProfileRow title1=\"Sector:\" data1={data.sector} title2=\"Industry:\" data2={data.industry} />\n          <h4>CEO</h4>\n          <p>{data.ceo}</p>\n          <h4>Website</h4>\n          <p>{data.website}</p>\n          <h4>Description</h4>\n          <p>{data.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Indexes from '../Indexes/Indexes';\nimport Stocks from '../Stocks/Stocks';\nimport Profile from '../Profile/Profile';\n\nconst Routes = () => (\n  <BrowserRouter>\n    <header>\n      <div className=\"errors\" />\n      <Indexes />\n    </header>\n    <Switch>\n      <Route path=\"/index/:id\">\n        <Stocks />\n      </Route>\n      <Route path=\"/stock/:id\">\n        <Profile />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","import { configureStore } from '@reduxjs/toolkit';\nimport indexReducer from './reducers/indexSlice';\nimport stockReducer from './reducers/stockSlice';\nimport profileReducer from './reducers/profileSlice';\nimport filterReducer from './reducers/filterSlice';\n\nconst store = configureStore({\n  reducer: {\n    indexes: indexReducer,\n    stocks: stockReducer,\n    profile: profileReducer,\n    filter: filterReducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport Routes from './app/containers/Routes/Routes';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
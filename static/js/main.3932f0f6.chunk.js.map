{"version":3,"sources":["app/api/requests.js","app/api/queries.js","app/reducers/indexSlice.js","app/reducers/profileSlice.js","app/containers/Stock/Stock.js","app/containers/IndustryFilter/IndustryFilter.js","app/reducers/filterSlice.js","app/containers/Stocks/Stocks.js","app/containers/Index/Index.js","app/reducers/stockSlice.js","app/data/components.js","app/containers/Indexes/Indexes.js","app/containers/Profile/Profile.js","app/containers/App/App.js","app/store.js","index.js"],"names":["require","config","quoteRequest","name","Request","process","port","method","profileRequest","query","request","a","fetch","response","json","getQuote","ticker","getProfile","indexSlice","createSlice","initialState","price","reducers","clearIndexes","state","Object","keys","forEach","key","updateQuote","action","payload","symbol","updateIndexes","index","refreshIndexes","createAsyncThunk","indexes","actions","profileSlice","updateProfile","data","refreshProfile","Stock","props","change","handleClick","useSelector","stocks","getCell","text","className","onClick","event","onKeyPress","role","companyName","changes","Math","round","sector","IndustryFilter","handleChange","filters","values","includes","push","onChange","target","value","map","filterSlice","stocksVisible","updateFilter","updateVisible","setVisible","Stocks","components","filter","dispatch","useDispatch","preventDefault","then","unwrapResult","originalPromiseResult","quote","Index","selectName","selectPrice","selectChange","changesPercentage","type","stockSlice","clearStocks","updateStocks","stock","refreshStocks","indexComponents","Indexes","handleQuery","join","Profile","profile","src","image","alt","mktCap","range","beta","lastDiv","dcf","exchangeShortName","country","industry","ceo","website","description","App","store","configureStore","reducer","indexReducer","stockReducer","profileReducer","filterReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3932f0f6.chunk.js","sourcesContent":["require('dotenv').config();\n\nexport const quoteRequest = (name) => new Request(\n  `https://financialmodelingprep.com/api/v3/quote/${name}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n\nexport const quotesRequest = (group) => new Request(\n  `https://financialmodelingprep.com/api/v3/quotes/${group}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n\nexport const profileRequest = (name) => new Request(\n  `https://financialmodelingprep.com/api/v3/profile/${name}?apikey=${process.env.REACT_APP_API_KEY}`,\n  {\n    port: 443,\n    method: 'GET',\n  },\n);\n","import { profileRequest, quoteRequest, quotesRequest } from './requests';\n\nasync function query(request) {\n  try {\n    const response = await fetch(request);\n    return response.json();\n  } catch (error) {\n    return null;\n  }\n}\n\nasync function getQuote(ticker) {\n  const request = quoteRequest(ticker);\n  return query(request);\n}\n\nasync function getQuotes(ticker) {\n  return query(quotesRequest(ticker));\n}\n\nasync function getProfile(ticker) {\n  return query(profileRequest(ticker));\n}\n\nexport { getProfile, getQuote, getQuotes };\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getQuote } from '../api/queries';\n\nconst initialState = {\n  '^GSPC': { name: 'S&P 500', price: '' },\n  '^NDX': { name: 'NASDAQ 100', price: '' },\n  '^STOXX50E': { name: 'ESTX 50 PR.EUR', price: '' },\n};\n\nexport const indexSlice = createSlice({\n  name: 'indexes',\n  initialState,\n  reducers: {\n    clearIndexes: (state) => {\n      Object.keys(state).forEach((key) => delete state[key]);\n    },\n    updateQuote: (state, action) => {\n      // eslint-disable-next-line prefer-destructuring\n      state[action.payload[0].symbol] = action.payload[0];\n    },\n    updateIndexes: (state, action) => {\n      action.payload.forEach((index) => {\n        state[index.symbol] = index;\n      });\n    },\n  },\n});\n\nexport const refreshIndexes = createAsyncThunk(\n  'indexes/updateIndexes',\n  async (indexes) => {\n    const response = await getQuote(indexes);\n    indexSlice.actions.updateIndexes(response);\n    return response;\n  },\n);\n\nexport const { clearIndexes, updateQuote, updateIndexes } = indexSlice.actions;\n\nexport default indexSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getProfile } from '../api/queries';\n\nconst initialState = { };\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    updateProfile: (state, action) => {\n      const data = action.payload[0];\n      // eslint-disable-next-line no-param-reassign\n      state.data = data;\n    },\n  },\n});\n\nexport const { updateProfile } = profileSlice.actions;\n\nexport const refreshProfile = createAsyncThunk(\n  'profile/updateProfile',\n  async (ticker) => {\n    const response = await getProfile(ticker);\n    updateProfile(response);\n    return response;\n  },\n);\n\nexport default profileSlice.reducer;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Stock.css';\n\nconst Stock = (props) => {\n  const { ticker, handleClick } = props;\n  const data = useSelector((state) => (state.stocks[ticker] ? state.stocks[ticker] : ''));\n\n  const getPercentage = (change, price) => {\n    if (price !== '') {\n      return (change !== 0 ? `${(Math.round((change * 10000) / price) / 100)}%` : '0%');\n    }\n    return '';\n  };\n\n  const getColor = () => (data && data.changes < 0 ? 'colorRed' : 'colorBlue');\n\n  const getCell = (text) => (\n    <div\n      className=\"cell\"\n      onClick={(event) => handleClick(event, ticker)}\n      onKeyPress={(event) => handleClick(event, ticker)}\n      role=\"presentation\"\n    >\n      {text}\n    </div>\n  );\n\n  return (\n    <tr className=\"stock\">\n      <td>\n        {getCell(data.companyName)}\n      </td>\n      <td>\n        {getCell(data.price)}\n      </td>\n      <td className={`change ${getColor()}`}>\n        {getCell(getPercentage(data.changes, data.price))}\n      </td>\n      <td>\n        {getCell(data.sector)}\n      </td>\n    </tr>\n  );\n};\n\nStock.propTypes = {\n  ticker: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Stock;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './IndustryFilter.css';\n\nconst IndustryFilter = (props) => {\n  const { handleChange } = props;\n  const stocks = useSelector((state) => state.stocks);\n  const filters = ['All'];\n\n  const createFilters = () => {\n    Object.values(stocks).forEach((data) => {\n      if (!filters.includes(data.sector)) {\n        filters.push(data.sector);\n      }\n    });\n  };\n  createFilters();\n\n  return (\n    <div className=\"filter\">\n      <div className=\"content\">\n        Sector:\n        {'  '}\n        <select\n          className=\"industry-filter\"\n          onChange={(event) => handleChange(event.target.value)}\n        >\n          {filters.map((sector) => (\n            <option key={sector} value={sector}>\n              {sector}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nIndustryFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default IndustryFilter;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 'All',\n  stocksVisible: true,\n};\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    updateFilter: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.value = action.payload;\n    },\n    updateVisible: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.stocksVisible = !state.stocksVisible;\n    },\n    setVisible: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.stocksVisible = true;\n    },\n  },\n});\n\nexport const { setVisible, updateFilter, updateVisible } = filterSlice.actions;\n\nexport default filterSlice.reducer;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { refreshProfile, updateProfile } from '../../reducers/profileSlice';\nimport Stock from '../Stock/Stock';\nimport IndustryFilter from '../IndustryFilter/IndustryFilter';\nimport { updateFilter, updateVisible } from '../../reducers/filterSlice';\nimport './Stocks.css';\n\nconst Stocks = () => {\n  const components = useSelector((state) => state.stocks);\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  const getProfile = (event, ticker) => {\n    event.preventDefault();\n    dispatch(updateVisible());\n    dispatch(refreshProfile(ticker))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateProfile(originalPromiseResult));\n      });\n  };\n\n  const createStocks = () => {\n    if (components) {\n      return Object.keys(components).filter((quote) => (\n        components[quote].sector === filter.value || filter.value === 'All')).map(\n        (quote) => <Stock key={quote} ticker={quote} handleClick={getProfile} />,\n      );\n    }\n    return [];\n  };\n\n  const changeFilter = (sector) => {\n    dispatch(updateFilter(sector));\n  };\n\n  return (\n    <div className={filter.stocksVisible ? 'dFlex' : 'dNone'}>\n      <div className=\"stocks\">\n        <IndustryFilter handleChange={changeFilter} />\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n              <th>Change</th>\n              <th>Sector</th>\n            </tr>\n          </thead>\n          <tbody>\n            {createStocks()}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Stocks;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Index.css';\n\nconst Index = (props) => {\n  const { ticker, handleClick } = props;\n  const selectName = useSelector((state) => state.indexes[ticker].name);\n  const selectPrice = useSelector((state) => state.indexes[ticker].price);\n  const selectChange = useSelector((state) => state.indexes[ticker].changesPercentage);\n\n  return (\n    <div className=\"index\">\n      <button\n        type=\"button\"\n        onClick={(event) => handleClick(event, ticker)}\n      >\n        {selectName}\n        <div className={selectChange < 0 ? 'colorRed' : 'colorBlue'}>\n          {selectPrice}\n          {' '}\n          {selectChange}\n          %\n        </div>\n      </button>\n    </div>\n  );\n};\n\nIndex.propTypes = {\n  ticker: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Index;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getProfile } from '../api/queries';\n\nconst initialState = {\n};\n\nexport const stockSlice = createSlice({\n  name: 'stocks',\n  initialState,\n  reducers: {\n    clearStocks: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      Object.keys(state).forEach((key) => delete state[key]);\n    },\n    updateStocks: (state, action) => {\n      action.payload.forEach((stock) => {\n        // eslint-disable-next-line no-param-reassign\n        state[stock.symbol] = stock;\n      });\n    },\n  },\n});\n\nexport const refreshStocks = createAsyncThunk(\n  'stocks/updateStocks',\n  async (ticker) => {\n    const response = await getProfile(ticker);\n    stockSlice.actions.updateStocks(response);\n    return response;\n  },\n);\n\nexport const { clearStocks, updateStocks } = stockSlice.actions;\n\nexport default stockSlice.reducer;\n","const indexComponents = {\n  '^GSPC': ['MSFT', 'AAPL', 'AMZN', 'FB', 'GOOGL', 'GOOG', 'JNJ', 'V', 'PG', 'JPM', 'HD', 'UNH', 'MA', 'NVDA', 'VZ', 'NFLX', 'ADBE', 'DIS', 'INTC', 'PYPL', 'T', 'PFE', 'CSCO'],\n  '^NDX': ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'GOOGL', 'FB', 'TSLA', 'NVDA', 'PYPL', 'INTC', 'ASML', 'CMCSA', 'NFLX', 'ADBE', 'CSCO', 'AVGO', 'PEP', 'TXN', 'PDD', 'TMUS', 'COST', 'QCOM', 'AMGN', 'AMAT', 'SBUX', 'JD', 'CHTR', 'INTU', 'MU', 'AMD'],\n  '^STOXX50E': ['MC.PA', 'ASML.AS', 'OR.PA', 'PRX.AS', 'VOW.DE', 'SAP.DE', 'LIN', 'SIE.DE', 'ABI.BR', 'SAN.PA'],\n};\n\nexport default indexComponents;\n","import { unwrapResult } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Index from '../Index/Index';\nimport { clearStocks, refreshStocks, updateStocks } from '../../reducers/stockSlice';\nimport indexComponents from '../../data/components';\nimport './Indexes.css';\nimport { setVisible, updateFilter } from '../../reducers/filterSlice';\n\nconst Indexes = () => {\n  const components = useSelector((state) => state.indexes);\n  const dispatch = useDispatch();\n\n  const handleQuery = (event, ticker) => {\n    event.preventDefault();\n    dispatch(clearStocks());\n    dispatch(setVisible());\n    dispatch(updateFilter('All'));\n    dispatch(refreshStocks(indexComponents[ticker].join(',')))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateStocks(originalPromiseResult));\n      });\n  };\n\n  const createIndexes = () => {\n    if (components) {\n      return Object.keys(components).map(\n        (ticker) => <Index key={ticker} ticker={ticker} handleClick={handleQuery} />,\n      );\n    }\n    return [];\n  };\n\n  return (\n    <div className=\"indexes\">\n      {createIndexes()}\n    </div>\n  );\n};\n\nexport default Indexes;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { updateVisible } from '../../reducers/filterSlice';\nimport './Profile.css';\n\nconst Profile = () => {\n  const data = useSelector((state) => (state.profile.data ? state.profile.data : ''));\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={`profile ${filter.stocksVisible ? 'dNone' : 'dFlex'}`}>\n      <div className=\"content\">\n        <button type=\"button\" onClick={() => dispatch(updateVisible())}>\n          Go Back\n        </button>\n        <div className=\"top\">\n          <img className=\"logo\" src={data.image} alt=\"logo\" />\n          <h2>\n            {data.companyName}\n          </h2>\n          <h4>\n            {data.price}\n          </h4>\n          <h5 className={data.changes < 0 ? 'colorRed' : 'colorBlue'}>\n            {data.changes}\n          </h5>\n        </div>\n        <div className=\"priceData\">\n          <div className=\"row\">\n            <div className=\"cell\">\n              <div>Previous close</div>\n              <div>\n                {Math.round((data.price - data.changes) * 100) / 100}\n              </div>\n            </div>\n            <div className=\"cell\">\n              <div>Market Cap</div>\n              <div>{data.mktCap}</div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"cell\">\n              <div>52 Week Range</div>\n              <div>\n                {data.range}\n              </div>\n            </div>\n            <div className=\"cell\">\n              <div>Beta</div>\n              <div>{data.beta}</div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"cell\">\n              <div>Dividend Yield</div>\n              <div>\n                {`${Math.round((data.lastDiv * 10000) / data.price) / 100}%`}\n              </div>\n            </div>\n            <div className=\"cell\">\n              <div>DCF</div>\n              <div>{data.dcf}</div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"cell\">\n              <div>Exchange</div>\n              <div>\n                {data.exchangeShortName}\n              </div>\n            </div>\n            <div className=\"cell\">\n              <div>Country</div>\n              <div>{data.country}</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"info\">\n          <h3>Company Information</h3>\n          <div className=\"row\">\n            <div className=\"cell\">\n              <div>Sector:</div>\n              <div>\n                {data.sector}\n              </div>\n            </div>\n            <div className=\"cell\">\n              <div>Industry:</div>\n              <div>{data.industry}</div>\n            </div>\n          </div>\n          <h4>CEO</h4>\n          <p>{data.ceo}</p>\n          <h4>Website</h4>\n          <p>{data.website}</p>\n          <h4>Description</h4>\n          <p>{data.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { refreshIndexes, updateIndexes } from '../../reducers/indexSlice';\nimport Stocks from '../Stocks/Stocks';\nimport Indexes from '../Indexes/Indexes';\nimport Profile from '../Profile/Profile';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const indexes = useSelector((state) => state.indexes);\n\n  if (indexes['^GSPC'].price === '') {\n    dispatch(refreshIndexes(Object.keys(indexes).join(',')))\n      .then(unwrapResult)\n      .then((originalPromiseResult) => {\n        dispatch(updateIndexes(originalPromiseResult));\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Indexes />\n      <Stocks />\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport indexReducer from './reducers/indexSlice';\nimport stockReducer from './reducers/stockSlice';\nimport profileReducer from './reducers/profileSlice';\nimport filterReducer from './reducers/filterSlice';\n\nconst store = configureStore({\n  reducer: {\n    indexes: indexReducer,\n    stocks: stockReducer,\n    profile: profileReducer,\n    filter: filterReducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './app/containers/App/App';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}